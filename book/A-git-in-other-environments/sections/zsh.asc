=== Git в Zsh

(((zsh)))(((tab completion, zsh)))(((shell prompts, zsh)))
Git поставляется с поддержкой автодополнения для Zsh.
Просто скопируйте файл `contrib/completion/git-completion.zsh` в вашу домашнюю директорию и добавьте его в конфигурацию `.zshrc`.
Интерфейс Zsh круче оного в Bash:

[source,console]
----
$ git che<tab>
check-attr        -- display gitattributes information
check-ref-format  -- ensure that a reference name is well formed
checkout          -- checkout branch or paths to working tree
checkout-index    -- copy files from index to working directory
cherry            -- find commits not merged upstream
cherry-pick       -- apply changes introduced by some existing commits
----

Возможные варианты автодополнения не просто перечислены; они снабжены полезными описаниями и вы можете выбрать нужный вариант, нажав `Tab` несколько раз.
Это работает не только для команд Git, но и для их аргументов, названий объектов (типа ссылок и удалённых репозиториев), а также для имён файлов и других вещей.

Настройка строки приветствия в Zsh похожа на таковую в Bash, но в Zsh вы можете установить дополнительную строку приветствия справа.
Чтобы отобразить имя текущей ветки в правой строке приветствия, добавьте следующие строки в ваш `~/.zshrc`:

[source,console]
----
setopt prompt_subst
. ~/git-prompt.sh
export RPROMPT=$'$(__git_ps1 "%s")'
----

В результате вы будете видеть имя текущей ветки в правой части окна терминала каждый раз, как перейдёте внутрь Git репозитория. Это выглядит примерно так:

.Кастомизированная строка приветствия в `zsh`.
image::../images/zsh-prompt.png[Кастомизированная строка приветствия в `zsh`.]

Zsh настолько конфигурируем, что существуют целые фреймворки, посвящённые его улучшению.
Пример такого проекта, называемый "oh-my-zsh", расположен на https://github.com/robbyrussell/oh-my-zsh[].
Система плагинов этого проекта включает в себя мощнейший набор правил автодополнения для Git, а многие "темы" (служащие для настройки строк приветствия) отображают информацию из различных систем контроля версий.
Вот пример настройки Zsh для комфортной работы с Git <<oh_my_zsh_git>>.

[[oh_my_zsh_git]]
.Пример темы oh-my-zsh.
image::../images/zsh-oh-my.png[Пример темы oh-my-zsh.]
